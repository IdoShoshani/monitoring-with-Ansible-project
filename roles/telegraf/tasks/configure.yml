- name: Ensure telegraf config file exist
  ansible.builtin.file:
    path: /etc/telegraf/telegraf.conf
    state: file
  ignore_errors: true
  register: result_telegraf_config_file

- name: Create new telegraf config
  ansible.builtin.shell: telegraf config > /etc/telegraf/telegraf.conf
  when: result_telegraf_config_file.failed

- name: Ensure Presence of InfluxDB Output Plugin
  ansible.builtin.lineinfile:
    path: /etc/telegraf/telegraf.conf
    regexp: '^\s*#?\s*\[\[outputs\.influxdb\]\].*$'
    line: '[[outputs.influxdb]]'
    state: present
    firstmatch: yes

- name: Apply InfluxDB Output Plugin Settings
  ansible.builtin.blockinfile:
    path: /etc/telegraf/telegraf.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK INFLUXDB"
    insertafter: '^\[\[outputs.influxdb\]\]\s*$'
    content: |2
        urls = ["http://{{ hostvars['influxdb']['ansible_host'] }}:8086"]
        database = "{{ influxdb_database }}"
        username = "{{ influxdb_user }}"
        password = "{{ influxdb_password }}"
  
- name: Ensure Presence of Disk Input Plugin
  ansible.builtin.lineinfile:
    path: /etc/telegraf/telegraf.conf
    regexp: '^\s*#\?\s*\[\[inputs\.disk\]\].*$'
    line: '[[inputs.disk]]'
    state: present
    firstmatch: yes

- name: Remove the ignore_fs line
  ansible.builtin.lineinfile:
    path: /etc/telegraf/telegraf.conf
    regexp: '^\s*ignore_fs = \["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs"\]'
    state: absent

- name:  Apply Disk Input Plugin Settings
  ansible.builtin.blockinfile:
    path: /etc/telegraf/telegraf.conf
    marker: "# {mark} ANSIBLE MANAGED BLOCK DISK"
    insertafter: '^\[\[inputs\.disk\]\]'
    content: |2
        ## Disk Input plugin configuration
        ## Collects disk usage statistics for mount points.
        ## Ignore mount points by filesystem type.
        ignore_fs = ["tmpfs", "devtmpfs", "devfs", "iso9660", "overlay", "aufs", "squashfs", "efivarfs"]
        ## Ignore mount points by mount options.
        ## Bind mounts can be ignored with the special 'bind' option.
        # ignore_mount_opts = []
  notify:
    - restart telegraf


- name: Check if Telegraf is working
  ansible.builtin.command: telegraf --test
  register: health_check
  changed_when: false  # Indicating this is a check, not a change

- name: Display Telegraf health check results
  ansible.builtin.debug:
    var: health_check.stdout_lines
  when: health_check.rc == 0  # Only display results if the check was successful

# - name: Configure InfluxDB output plugin settings
#   ansible.builtin.blockinfile:
#     path: /etc/telegraf/telegraf.conf
#     marker: "# {mark} ANSIBLE MANAGED BLOCK INFLUXDB"
#     block: |
#       ## InfluxDB output plugin configuration
#       urls = ["http://{{ hostvars['influxdb']['ansible_host'] }}:8086"]
#       database = "telegraf"
      # username = {{ influxdb_user }}
      # password = {{  influxdb_password }}

#       ## Name of existing retention policy to write to. Empty string writes to
#       ## the default retention policy. Only takes effect when using HTTP.
#       # retention_policy = ""

#       ## Write consistency (clusters only), can be: "any", "one", "quorum", "all".
#       ## Only takes effect when using HTTP.
#       # write_consistency = "any"

#       ## HTTP Basic Auth
#       # username = "telegraf"
#       # password = "metricsmetricsmetricsmetrics"

#       ## Optional TLS Config for use on HTTP connections.
#       # tls_ca = "/etc/telegraf/ca.pem"
#       # tls_cert = "/etc/telegraf/cert.pem"
#       # tls_key = "/etc/telegraf/key.pem"
#       ## Use TLS but skip chain & host verification
#       # insecure_skip_verify = false

#       ## HTTP Content-Encoding for write request body, can be set to "gzip" to
#       ## compress body or "identity" to apply no encoding.
#       # content_encoding = "gzip"

#       ## When true, Telegraf will output unsigned integers as unsigned values,
#       ## i.e.: "42u".  You will need a version of InfluxDB supporting unsigned
#       ## integer values.  Enabling this option will result in field type errors if
#       ## existing data has been written.
#       # influx_uint_support = false

#       ## When true, Telegraf will omit the timestamp on data to allow InfluxDB
#       ## to set the timestamp of the data during ingestion. This is generally NOT
#       ## what you want as it can lead to data points captured at different times
#       ## getting omitted due to similar data.
#       # influx_omit_timestamp = false
#   notify:
#     - restart telegraf

# - name: Ensure Disk Input plugin is configured
#   ansible.builtin.lineinfile:
#     path: /etc/telegraf/telegraf.conf
#     regexp: '^\s*#?\s*\[\[inputs\.disk\]\]'
#     line: '[[inputs.disk]]'
#     state: present
#     insertbefore: '^# BEGIN ANSIBLE MANAGED BLOCK DISK'

# - debug:
#     var: telegraf_conf_content.stdout_lines

# - name: Debug the resulting Telegraf configuration with line breaks
#   ansible.builtin.debug:
#     msg: "{{ lookup('ansible.builtin.file', '/etc/telegraf/telegraf.conf').splitlines() }}"